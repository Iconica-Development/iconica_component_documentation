name: Generate and Commit Documentation

on:
  workflow_dispatch:
    inputs:
      repository_url:
        description: 'URL of the package repository'
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
    - name: Clone central repository
      uses: actions/checkout@v4
    - uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true
        cache-key: ${{ runner.OS }}-flutter-install-cache
    - name: Clone package repository
      run: git clone ${{ github.event.inputs.repository_url }} repository/


    - name: Check for melos.yaml
      id: melos-check
      run: |
        if [ -f repository/melos.yaml ]; then
          echo "::set-output name=melos::true"
        else
          echo "::set-output name=melos::false"
        fi

    - name: Generate documentation for Melos packages
      if: steps.melos-check.outputs.melos == 'true'
      run: |
        cd repository/
        for PACKAGE_DIR in packages/*; do
          if [ -d "$PACKAGE_DIR" ]; then
            cd $PACKAGE_DIR
            flutter pub get
            flutter pub global activate dartdoc
            flutter pub global run dartdoc
            echo "Listing contents of $PACKAGE_DIR/doc/api:"
            ls -R doc/api/
            if [ -d "doc/api" ]; then
              cd ../..
              PACKAGE_NAME=$(basename $PACKAGE_DIR)
              mkdir -p ../docs/$PACKAGE_NAME
              cp -r $PACKAGE_DIR/doc/api/* ../docs/$PACKAGE_NAME/
            else
              echo "No documentation was generated for $PACKAGE_DIR"
              cd ../..
            fi
          fi
        done

    - name: Generate documentation for single package
      if: steps.melos-check.outputs.melos == 'false'
      run: |
        cd repository/
        flutter pub get
        flutter pub global activate dartdoc
        flutter pub global run dartdoc
        echo "Listing contents of repository/doc/api:"
        ls -R doc/api/
        if [ -d "doc/api" ]; then
          REPO_NAME="${{ github.event.inputs.repository_url }}"
          REPO_NAME="${REPO_NAME/https:\/\/github.com\//}"
          REPO_NAME="${REPO_NAME/\//'-'}"
          mkdir -p ../docs/$REPO_NAME
          cp -r doc/api/* ../docs/$REPO_NAME/
        else
          echo "No documentation was generated for the repository"
        fi

    - name: Cleanup
      run: |
        rm -rf repository/

    - name: Update Index HTML  
      run: |
        echo "<!DOCTYPE html>" > ./docs/index.html
        echo "<html lang=\"en\">" >> ./docs/index.html
        echo "<head>" >> ./docs/index.html
        echo "    <meta charset=\"UTF-8\">" >> ./docs/index.html
        echo "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">" >> ./docs/index.html
        echo "    <title>Package Documentation</title>" >> ./docs/index.html
        echo "</head>" >> ./docs/index.html
        echo "<body>" >> ./docs/index.html
        echo "    <h1>Package Documentation</h1>" >> ./docs/index.html
        echo "    <ul>" >> ./docs/index.html
        for dir in ./docs/*; do
          if [ -d "$dir" ] && [ "$(basename "$dir")" != "api" ]; then # Exclude the 'api' folder if it's not a package
            PACKAGE_NAME=$(basename "$dir")
            PACKAGE_URL="./$(basename "$dir")/api/index.html"
            echo "        <li><a href=\"$PACKAGE_URL\">$PACKAGE_NAME</a></li>" >> ./docs/index.html
          fi
        done
        echo "    </ul>" >> ./docs/index.html
        echo "</body>" >> ./docs/index.html
        echo "</html>" >> ./docs/index.html

    - name: Commit changes
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        git commit -m "Update documentation for ${{ github.event.inputs.repository_url }}"
        git push
